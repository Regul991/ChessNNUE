#pragma once
#include "position.h"
#include "move.h" // popcount()
#include "bitboard.h" 
/*---------------------------------------------
 *  Материал  +  Piece-Square Tables (PST)
 *  возвращается в сотых пешки
 *--------------------------------------------*/

constexpr int VAL[6] = { 100, 320, 330, 500, 900, 0 };

/*            a1 … h1  …  a8 … h8   (WHITE — снизу)          */
constexpr int PST_PAWN[64] = {
      0,  0,  0,  0,  0,  0,  0,  0,
     50, 60, 70, 80, 80, 70, 60, 50,
     30, 40, 50, 70, 70, 50, 40, 30,
     20, 25, 30, 60, 60, 30, 25, 20,
     10, 15, 20, 50, 50, 20, 15, 10,
      5,  5, 15, 35, 35, 15,  5,  5,
      0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0
};

constexpr int PST_KNIGHT[64] = {
    -50,-40,-30,-30,-30,-30,-40,-50,
    -40,-20,  0,  5,  5,  0,-20,-40,
    -30,  5, 10, 15, 15, 10,  5,-30,
    -30,  0, 15, 20, 20, 15,  0,-30,
    -30,  5, 15, 20, 20, 15,  5,-30,
    -30,  0, 10, 15, 15, 10,  0,-30,
    -40,-20,  0,  0,  0,  0,-20,-40,
    -50,-40,-30,-30,-30,-30,-40,-50
};

constexpr int PST_BISHOP[64] = {
    -20,-10,-10,-10,-10,-10,-10,-20,
    -10,  5,  0,  0,  0,  0,  5,-10,
    -10, 10, 10, 10, 10, 10, 10,-10,
    -10,  0, 10, 15, 15, 10,  0,-10,
    -10,  5, 10, 15, 15, 10,  5,-10,
    -10, 10, 10, 10, 10, 10, 10,-10,
    -10,  5,  0,  0,  0,  0,  5,-10,
    -20,-10,-10,-10,-10,-10,-10,-20
};

constexpr int PST_ROOK[64] = {
      0,  0,  5, 10, 10,  5,  0,  0,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
      5, 10, 10, 10, 10, 10, 10,  5,
      0,  0,  5, 10, 10,  5,  0,  0
};

constexpr int PST_QUEEN[64] = {
    -20,-10,-10, -5, -5,-10,-10,-20,
    -10,  0,  5,  0,  0,  0,  0,-10,
    -10,  5,  5,  5,  5,  5,  0,-10,
     -5,  0,  5,  5,  5,  5,  0, -5,
      0,  0,  5,  5,  5,  5,  0, -5,
    -10,  0,  5,  5,  5,  5,  0,-10,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -20,-10,-10, -5, -5,-10,-10,-20
};

constexpr int PST_KING_MID[64] = {
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -20,-30,-30,-40,-40,-30,-30,-20,
    -10,-20,-20,-20,-20,-20,-20,-10,
     20, 20,  0,  0,  0,  0, 20, 20,
     20, 30, 10,  0,  0, 10, 30, 20
};

constexpr const int* PST[6] = { // Массив указателей на ПСТ таблицы 
    PST_PAWN, PST_KNIGHT, PST_BISHOP, PST_ROOK, PST_QUEEN, PST_KING_MID
};

constexpr int mirror(int sq) { // Функция зеркалит квадрат по вертикали
    return sq ^ 56; // a1 (0) → a8 (56)
}

inline int material_score(const Position& pos) {
    int s = 0; // Начальная оценка в сотых пешки
    for (int pt = 0; pt < 6; ++pt) { // Проходим по всем типам фигуры
        Bitboard wb = pos.bb[WHITE][pt]; // Битборды белых фигур 
        while (wb) { // Пока есть хотя бы одна белая фигуры 
            Square sq = pop_lsb(wb); // Достаем и удаляем LSB (самый младший бит) 
            s += VAL[pt] + PST[pt][sq]; // Материал плюс ПСТ
        }
        Bitboard bb = pos.bb[BLACK][pt];
        while (bb) {
            Square sq = pop_lsb(bb);
            s -= VAL[pt] + PST[pt][mirror(sq)];
        }
    }
    return (pos.stm == WHITE) ? s : -s;
}

inline int evaluate(const Position& pos) { // ПРосто возвращает оценку материала
    return material_score(pos);  // пока что, походу не пока что а навсегда...
}
